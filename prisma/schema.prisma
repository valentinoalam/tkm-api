// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "./generated/dto"
  outputToNestJsResourceStructure = "true"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  generateFileTypes               = "all"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "true"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "false"
  requiredResponseApiProperty     = "true"
  prettier                        = "true"
  outputApiPropertyType           = "true"
}
generator custom_generator {
    provider = "prisma-generator-fake-data"
    output   = "./types/fake-data.ts"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}
model AppsheetPhoto {
  id              String  @id @default(uuid()) @db.Char(36)
  name            String  @unique
  thumbnailLink   String?
  imageLink       String?
  downloadLink    String?
  transaksi       AppsheetTransaksi?
}
model AppsheetTransaksi {
  id              String  @id @default(uuid()) @db.Char(36)
  appSheetId      String?  @unique
  accountId      String?
  categoryId      String  @map("category_id") @db.Char(36)
  photoId         String? @unique
  timeStamp       DateTime? 
  activity        String
  value           Decimal? @map("amount")

  isDeleted       Boolean @default(false)
  dtTransaction   DateTime
  dtCreated       DateTime           @default(now())
  dtModified      DateTime? @updatedAt @map("date_modified")
  category        AppsheetKategori @relation(fields: [categoryId], references: [id])
  photo           AppsheetPhoto? @relation(fields: [photoId], references: [id])
  account         Account? @relation(fields: [accountId], references: [id])
}

model AppsheetKategori {
  id            String  @id @default(uuid()) @db.Char(36)
  type          TransactionType
  category      String    
  description   String?
  color         String?
  createdAt     DateTime  @default(now()) @map("date_created")
  updatedAt     DateTime? @updatedAt @map("date_modified")
  transaksi     AppsheetTransaksi[]
  budget        Budget[]
  @@unique([type, category])
}
model TransactionCategory {
  id            String  @id @default(uuid()) @db.Char(36)
  type          TransactionType
  boundary      Boundary?
  category      String    
  description   String?
  color         String?
  createdAt     DateTime  @default(now()) @map("date_created")
  updatedAt     DateTime? @updatedAt @map("date_modified")
  activity      TransactionActivity[]
  @@unique([type, category])
}
model Account {
  id                  String  @id @default(uuid()) @db.Char(36)
  parentAccountId     String? @db.Char(36)// For hierarchical accounts
  code                String
  name                String
  description         String
  type                AccountType
  isDebit             Boolean
  initialBalance      Decimal?
  currentBalance      Decimal?
  createdAt           DateTime  @default(now()) @map("date_created")
  updatedAt           DateTime? @updatedAt @map("date_modified")
  parent              Account?  @relation("NestedAccount", fields: [parentAccountId], references: [id])
  children            Account[] @relation("NestedAccount")
  debitEntries        TransactionActivity[] @relation(name: "debitEntry")
  creditEntries       TransactionActivity[] @relation(name: "creditEntry")
  
  ledger              Ledger[]
  BankAccount         BankAccount[]
  apsTransactions        AppsheetTransaksi[]

  TrialBalanceDetail TrialBalanceDetail[]

  transactions Transaction[]
}
model Budget {
  id            String   @id @default(uuid())
  categoryId    String
  amount        Decimal
  year          Int
  month         Int
  category      AppsheetKategori? @relation(fields: [categoryId], references: [id])

  @@unique([categoryId, year, month])
}

model TransactionActivity {
  id              String    @id @default(uuid()) @db.Char(36)
  categoryId      String?                @db.Char(36)
  debitAccountId  String                @db.Char(36)
  creditAccountId String                @db.Char(36)
  name            String
  debitAccount    Account               @relation(name:"debitEntry", fields: [debitAccountId], references: [id])
  creditAccount   Account               @relation(name:"creditEntry", fields: [creditAccountId], references: [id])
  createdAt       DateTime              @default(now()) @map("date_created")
  updatedAt       DateTime?             @updatedAt @map("date_modified")
  category        TransactionCategory?  @relation(fields: [categoryId], references: [id])
  transaction     Transaction[]
}

enum TransactionType {
  Pengeluaran
  Penerimaan
}

model Transaction {
  id              String           @id @default(uuid()) @db.Char(36)
  activityId      String           @db.Char(36)
  accountId       String           @db.Char(36)
  vendorId        String?          @db.Char(36)
  mediaId         String?          @db.Char(36)
  programId       String?          @db.Char(36)
  type            TransactionType
  description     String
  refCode         String?
  dtTrx           DateTime
  amount          Decimal
  activity        TransactionActivity   @relation(fields: [activityId], references: [id])
  account         Account               @relation(fields: [accountId], references: [id])
  vendor          Vendor?               @relation(fields: [vendorId], references: [id])
  media           Media?                @relation(fields: [mediaId], references: [id])
  program         Program?              @relation(fields: [programId], references: [id])
  createdAt       DateTime              @default(now()) @map("date_created")
  updatedAt       DateTime?             @updatedAt @map("date_modified")
  createdBy       String
  updatedBy       String?
}

enum ProgramStatus {
  Fundraising
  OnProgress
  Completed
}

model Program {
  id                  String  @id @default(uuid()) @db.Char(36)
  name                String
  description         String
  budget              Decimal
  realisation         Decimal
  uptake              Decimal
  status              ProgramStatus
  createdAt           DateTime  @default(now()) @map("date_created")
  updatedAt           DateTime? @updatedAt @map("date_modified")
  transaction         Transaction[]
}

enum AccountType {
  Asset
  Liability
  Equity
  Income
  Expense
}
model TrialBalance {
  id          String  @id @default(uuid()) @db.Char(36)
  ledgerId    String  @db.Char(36)
  periodStart DateTime
  periodEnd   DateTime
  totalDebit  Decimal
  totalCredit Decimal
  createdAt   DateTime @default(now()) @map("date_created")
  ledger      Ledger  @relation(fields: [ledgerId], references: [id])
  TrialBalanceDetail TrialBalanceDetail[]
}

model TrialBalanceDetail {
  id              String  @id @default(uuid()) @db.Char(36)
  trialBalanceId  String  @db.Char(36)
  accountId       String    @db.Char(36)
  isDebit         Boolean @default(true)
  openingBalance  Decimal
  closingBalance  Decimal
  account         Account       @relation(fields: [accountId], references: [id])
  trialBalance    TrialBalance  @relation(fields: [trialBalanceId], references: [id])
}

model Ledger {
  id          String  @id @default(uuid()) @db.Char(36)
  name        String
  description String

  createdAt   DateTime @default(now()) @map("date_created")
  updatedAt   DateTime? @updatedAt @map("date_modified")

  reportPeriod Period // Enum: DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY
  startWeekDay WeekDay // Enum: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
  accounts     Account[]
  // TrialBalance TrialBalance[]

  TrialBalance TrialBalance[]
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Period {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model User {
  id             String    @id @default(uuid()) @db.Char(36)
  positionId     String?    @db.VarChar(36)
  email          String?   @unique
  username       String    @unique
  hashedPassword String    @map("hashed_password") @db.VarChar(100)
  hashedRT       String?   @map("hashed_rt") @db.VarChar(100)
  lastActive     DateTime?
  createdAt      DateTime  @default(now()) @map("date_created")
  updatedAt      DateTime? @updatedAt @map("date_modified")
  profile        Profile?
  position       Position? @relation(fields: [positionId], references: [id])

  userRoles      UserRoles[]

  Mosque         Mosque?

  notifications  UserNotification[]
}

model UserNotification {
  id                String  @id @default(uuid()) @db.Char(36)
  userId            String @map("user_id") @db.Char(36)
  notificationId   String @map("notif_id") @db.Char(36)
  status            NotificationStatus 

  createdAt       DateTime    @default(now())
  readAt          DateTime?
  user  User?         @relation(fields: [userId], references: [id])
  notif Notification  @relation(fields: [notificationId], references: [id])

  @@unique([userId, notificationId])
}
model UserRoles {
  id        String  @id @default(uuid()) @db.Char(36)
  userId    String  @db.Char(36)
  roleId    String  @db.Char(36)
  user      User    @relation(fields: [userId], references: [id])
  role      Role    @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
}
model Role {
  id           String    @id @default(uuid()) @db.Char(36)
  name         String
  description  String
  user_roles   UserRoles[]
  roleAccess   RoleAccess[]
}

model RoleAccess {
  id           String  @id @default(uuid()) @db.Char(36)
  roleId       String  @db.VarChar(36)
  resource     String
  action       String
  role         Role    @relation(fields: [roleId], references: [id])
}

model Profile {
  id         String    @id @default(uuid()) @db.Char(36)
  userId     String    @unique @map("user_id") @db.VarChar(36)
  dob        DateTime
  name       String    @db.VarChar(50)
  phone      String?   @db.VarChar(30)
  address    String?   @db.VarChar(255)
  dtModified   DateTime? @updatedAt @map("date_modified")

  user User @relation(fields: [userId], references: [id])
}

model Position {
  id                  String  @id @default(uuid()) @db.Char(36)
  fondationId      String  @db.Char(36) @unique
  name                String

  createdAt           DateTime  @default(now()) @map("date_created")
  updatedAt           DateTime? @updatedAt @map("date_modified")
  user                User[]      
  fondation           Fondation @relation(fields: [fondationId], references: [id])
}

model Fondation {
  id              String    @id @default(uuid()) @db.Char(36)         // UUID with 36 characters
  mosqueId        String    @db.Char(36) @unique
  name            String    @db.VarChar(100)    
  periode         String
  createdAt       DateTime  @default(now()) @map("date_created")
  updatedAt       DateTime? @updatedAt @map("date_modified")
  member          Position[]
  mosque          Mosque    @relation(fields: [mosqueId], references: [id])

}

model BankAccount {
  id            String  @id @default(uuid()) @db.Char(36)
  accountId     String
  bankName      String
  accountNumber String
  onBehalfOf    String
  description   String
  createdAt     DateTime @default(now()) @map("date_created")
  updatedAt     DateTime? @updatedAt @map("date_modified") 
  account       Account   @relation(fields: [accountId], references: [id])
}
model Mosque {
  id              String    @id @default(uuid()) @db.Char(36)         // UUID with 36 characters
  userId          String    @db.Char(36) @unique
  name            String    @db.VarChar(100)                                   // Foundation name with a max length of 100 characters @unique @unique @unique
  address         String    @db.VarChar(255)                          // Address with a max length of 255 characters
  city            String    @db.VarChar(100)                          // City name with a max length of 100 characters
  province        String    @db.VarChar(100)                          // Province name with a max length of 100 characters
  logoUrl         String    @db.VarChar(255)                          // Logo URL with a max length of 255 characters
  email           String    @unique @db.VarChar(100)                  // Email with a max length of 100 characters
  whatsappNo      String    @db.VarChar(15)                           // WhatsApp number with a max length of 15 characters (e.g., +123456789012345)

  // Optional fields with character limits:
  phoneNo         String?   @db.VarChar(15)                           // Optional phone number with a max length of 15 characters
  websiteUrl      String?   @db.VarChar(255)                          // Optional website URL with a max length of 255 characters

  createdAt       DateTime  @default(now()) @map("date_created")      // Creation timestamp
  updatedAt       DateTime? @updatedAt @map("date_modified")          // Last update timestamp
  // Relations (if applicable):
  fondation    Fondation?
  user         User      @relation(fields: [userId], references: [id])
}

enum Boundary {
  Permanen
  Sementara
  Tanpa_Batasan
}

model Vendor {
  id            String         @id @default(uuid()) @db.Char(36)
  name          String
  phone         String
  address       String
  businessField String         @map("jenis_usaha")
  note          String
  createdAt     DateTime       @default(now()) @map("date_created")
  updatedAt     DateTime?      @updatedAt @map("date_modified")
  transactions  Transaction[]
}

model Media {
  id  String  @id @default(uuid()) @db.Char(36)
  img Image[]

  Transaction Transaction[]
}

model Image {
  id        String    @id @default(uuid()) @db.Char(36)
  mediaId   String?
  caption   String
  url       String
  createdAt DateTime  @default(now()) @map("date_created")
  updatedAt DateTime? @updatedAt @map("date_modified")

  container Media? @relation(fields: [mediaId], references: [id])
}

enum AcquisitionOrigin {
  Donation
  Purchase
  Lease
  Rental
  Pledges
  MosqueBuildingFund
  RemnantProgramFund
  InvestmentReturns
  Grants
  Other
}

enum AssetTypes {
    Fixed
    NonFixed
    Current
    NonCurrent
}

model Asset {
  id                String  @id @default(uuid()) @db.Char(36)
  name              String  @map("nama_aset")
  description       String    @map("deskripsi")

  date_acquired     DateTime
  economicLife      Int       @map("umur_ekonomis")
  qty               Int       @map("kuantitas")
   
  createdAt         DateTime  @default(now()) @map("date_created")
  updatedAt         DateTime? @updatedAt      @map("date_modified")
  createdBy         String
  editedBy          String

  type              AssetTypes        @map("jenis_aset")
  origin            AcquisitionOrigin @map("asal_perolehan")
  AssetStatus       AssetStatus[]


  assetTags AssetTags[]
}

model AssetStatus {
  id            String  @id @default(uuid()) @db.Char(36)
  assetId       String  @db.Char(36)

  availableQty  Int
  totalQty      Int
  note          String

  updatedBy     String  @db.Char(36)
  updatedAt     DateTime? @updatedAt      @map("date_modified")

  asset       Asset     @relation(fields: [assetId], references: [id])
}

model Tag {
  id            String  @id @default(uuid()) @db.Char(36)
  name          String
  description   String
  createdAt     DateTime  @default(now()) @map("date_created")
  updatedAt     DateTime? @updatedAt @map("date_modified")

  assetTags AssetTags[]
}

model AssetTags {
  id            String  @id @default(uuid()) @db.Char(36)
  assetId       String @map("aset_id") @db.Char(36)
  tagId         String @map("tag_id") @db.Char(36)

  asset         Asset         @relation(fields: [assetId], references: [id])
  tag           Tag           @relation(fields: [tagId], references: [id])

  @@unique([assetId, tagId])
}

model Ustadz {
  id            String  @id @default(uuid()) @db.Char(36)
  name          String
  phone         String
  address       String
}

model Notification {
  id              String             @id @default(uuid()) @db.Char(36)
  sender          String?
  title           String
  message         String
  photoUrl        String?
  dtCreated       DateTime           @default(now())
  receiver        UserNotification[]
  sentAt          DateTime
  @@map("notification")
}

enum NotificationStatus {
  Pending
  Sent
  Failed
  Delivered
  Readed
}
